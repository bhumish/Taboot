taboot-tasks(5)
===============
:doctype:manpage
:man source:   Taboot
:man version:  0.4.x


NAME
----
taboot-tasks - quick reference for the built in tasks




DESCRIPTION
-----------

Taboot is a tool written for scripting and automating the task of
performing software releases in a large-scale infrastructure. Release
scripts are written using YAML syntax.

Taboot tasks are pre-written actions to perform on a given host. For
example, scheduling downtime in Nagios, or updating all the RPMs on a
system. The tasks documented here can be used in __preflight__ and
__tasks__ blocks. The syntax of each possible tasks varies. Taboot
comes with many built-in tasks.

This quick-reference is example based and only uses abbreviated forms
where possible. Additionally, the options for the __output__ block are
provided.


Output
------

The __output__ block lets you choose zero or more methods to log the
taboot run. The *CLIOutput* method is the default. See the online
documentation to learn how to set system-wide defaults for the
*HTMLOutput* logger.

[literal]
---
- hosts: [www0*.company.com]
  output:
    # CLIOutput is the default
    - CLIOutput
    # You can also log to a file, 'taboot-YYYY-MM-DD-HHMMSS.log' is
    # the default format
    - LogOutput
    # The 'logfile' keyword lets you choose a different name
    - LogOutput: {logfile: update-httpd.log}
    # Log to an HTML file ('taboot-%s.html')
    - HTMLOutput
    # As above, but put the logfile in the webservers log directory
    - HTMLOutput: {destdir: /var/www/html/logs}
    # HTML output again, but with a named file
    - HTMLOutput: {logfile: update-httpd.html}
    # HTML output where *%s* is substituted with a datestamp in the
    # form YYYY-MM-DD-HHMMSS
    - HTMLOutput: {logfile: update-httpd-%s.html}


Command
-------

The *Command* class lets you run arbitrary commands on the remote host.

[literal]
---
- hosts: [www0*.company.com]
  tasks:
    # Install httpd on all matching hosts
    - command.Run: {command: yum -y install httpd}


Service
-------

The *Service* class provides an interface to the system __service__
command.

[literal]
---
- hosts: [www0*.company.com]
  tasks:
    # Start httpd on all matching hosts
    - service.Start: {service: httpd}
    # Stop httpd on all matching hosts
    - service.Stop: {service: httpd}
    # Restart httpd on all matching hosts
    - service.Restart: {service: httpd}


Puppet
------

The *Puppet* class provides a uniform way to interact with the puppet
service. This includes enabling/disabling the daemon and manually
forcing a catalog run.

[literal]
---
- hosts: [www0*.company.com]
  tasks:
    # Enable puppet
    - puppet.Enable
    # Disable puppet
    - puppet.Disable
    # Delete that stubborn lockfile
    - puppet.DeleteLockfile
    # Test run
    - puppet.Run
    # Test run with specified server
    - puppet.Run: {server: my.puppet.server}
    # No operation run
    - puppet.Run: {noop: true}
    # Do a paranoid test run (quit Taboot on possible errors)
    - puppet.SafeRun
    # Do a paranoid test run with specified server
    - puppet.SafeRun: {server: my.puppet.server}
    # Do a noop (dry-run)
    - puppet.Run: {noop: True}


Nagios
------

The *Nagios* class lets you handle notifications and set downtime from
your Taboot scripts.

Use the *service_host* property to schedule downtime for an alternate
host. When setting downtime you can use the value *HOST* by itself to
schedule host level downtime (services will still alert if downtime
isn't set for them explicitly).

[literal]
---
- hosts: [www0*.company.com]
  tasks:
    # Disable alerts for all matching hosts
    - nagios.DisableAlerts:
        nagios_url: nagios.example.com
    # Enable alerts for all matching hosts
    - nagios.EnableAlerts:
        nagios_url: nagios.example.com
    # Schedule a 60 minute downtime for httpd, git and XMLRPC on
    # all matching hosts
    - nagios.ScheduleDowntime:
        nagios_url: nagios.example.com
        service: [httpd, git, XMLRPC]
        minutes: 60
    # Silence all host and service notifications
    - nagios.SilenceHost:
        nagios_url: nagios.example.com
    # Unsilence all host and service notifications
    - nagios.UnsilenceHost:
        nagios_url: nagios.example.com


Sleep
-----

The *Sleep* class is used to halt further task processing for a
specified period of time.

[literal]
---
- hosts: [www0*.company.com]
  tasks:
    # Pauses execution for 5 minutes
    - sleep.Seconds: {seconds: 300}
    # Also pauses execution for 5 minutes
    - sleep.Minutes: {minutes: 5}
    # Pauses execution until the user presses Enter
    - sleep.WaitOnInput
    # Also pauses execution until user presses Enter
    # but also allows you to override the message prompt
    - sleep.WaitOnInput: {message: "This is the user prompt:"}

Yum
---

The *Yum* class lets you install, remove, and update RPMs right in your
Taboot scripts.

[literal]
---
- hosts: [www0*.company.com]
  tasks:
    # Install three packages
    - yum.Install: {packages: [httpd, php5, screen]}
    # Remove the same three packages
    - yum.Remove: {packages: [httpd, php5, screen]}
    # Update the same three packages
    - yum.Update: {packages: [httpd, php5, screen]}


RPM
---

The *RPM* class provides two utility actions that, when used together,
report any RPMs that changed between the PreManifest and PostManifest.

[literal]
---
- hosts: [www0*.company.com]
  tasks:
    # Take a PreManifest of all installed packages
    - rpm.PreManifest
    # Use yum to update all the system RPMs.
    - yum.Update
    # Take a PostManifest and diff it against the PreManifest
    # The diff is printed after PostManifest finishes running.
    - rpm.PostManifest



AJP
---

The *AJP* class provides a uniform way to put nodes into and out of
rotation in a mod_jk AJP balancer. This module is a great replacement
for manually adding and removing nodes in a jkmanage management panel.

[literal]
---
- hosts: [tomcat*.int.company.com]
  tasks:
    # Take the matching node out of rotation
    - mod_jk.OutOfRotation:
        proxies:
            - proxyjava01.web.prod.int.example.com
            - proxyjava02.web.prod.int.example.com
    # Do stuff....
    # do more stuff...
    # Put the node back into the pool
    - mod_jk.InRotation:
        proxies:
            - proxyjava01.web.prod.int.example.com
            - proxyjava02.web.prod.int.example.com


MISC
----

The *MISC* class has two simple tasks in it: Noop and Echo. They are
primarily intended for instruction and as placeholders while testing
scripts or major code changes.

[literal]
---
- hosts: [www0*.company.com]
  tasks:
    # Do nothing
    - misc.Noop
    # Echo back the 'input'
    - misc.Echo: {input: "Taboot Rules!"}



AUTHOR
------

Taboot was originally written by John Eckersberg. Tim Bielawa is the
current maintainer. See the AUTHORS file for a complete list of
contributors.


COPYRIGHT
---------

Copyright Â© 2009-2011, Red Hat, Inc

Taboot is released under the terms of the GPLv3+ license.



SEE ALSO
--------
*taboot*(1), *func*(1)


Taboot home page: <https://fedorahosted.org/Taboot/>

HTML Docs: <http://people.redhat.com/~tbielawa/taboot/docs/taboot-latest/tasks.html>
